#!/bin/bash

###############################################################################
# WPB Views Counter Pro - Validation Script
# 
# Este script valida que todo esté correcto ANTES de ir a producción
# 
# Uso: ./validate.sh https://staging.elpilon.com.co
###############################################################################

set -e  # Exit on error

# Colores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Variables
SITE_URL="${1:-https://staging.elpilon.com.co}"
API_BASE="$SITE_URL/wp-json/wpb/v1"
GRAPHQL_ENDPOINT="$SITE_URL/graphql"
PASS_COUNT=0
FAIL_COUNT=0
WARN_COUNT=0

# Funciones helper
print_header() {
    echo -e "\n${GREEN}========================================${NC}"
    echo -e "${GREEN}$1${NC}"
    echo -e "${GREEN}========================================${NC}\n"
}

print_test() {
    echo -e "Testing: $1"
}

print_pass() {
    echo -e "${GREEN}✓ PASS${NC}: $1"
    ((PASS_COUNT++))
}

print_fail() {
    echo -e "${RED}✗ FAIL${NC}: $1"
    ((FAIL_COUNT++))
}

print_warn() {
    echo -e "${YELLOW}⚠ WARN${NC}: $1"
    ((WARN_COUNT++))
}

# Validar que curl está instalado
if ! command -v curl &> /dev/null; then
    echo "Error: curl is required but not installed"
    exit 1
fi

if ! command -v jq &> /dev/null; then
    echo "Warning: jq not installed. Install for better output: sudo apt-get install jq"
fi

print_header "WPB VIEWS COUNTER PRO - VALIDATION SCRIPT"
echo "Site: $SITE_URL"
echo "API: $API_BASE"

###############################################################################
# TEST 1: Status Endpoint
###############################################################################
print_header "TEST 1: Status Endpoint"
print_test "Checking /status endpoint..."

STATUS_RESPONSE=$(curl -s "$API_BASE/status")
STATUS_CODE=$(curl -s -o /dev/null -w "%{http_code}" "$API_BASE/status")

if [ "$STATUS_CODE" = "200" ]; then
    print_pass "Status endpoint accessible (HTTP 200)"
    
    # Parse response
    VERSION=$(echo "$STATUS_RESPONSE" | jq -r '.version // "unknown"')
    BUFFER_ENABLED=$(echo "$STATUS_RESPONSE" | jq -r '.buffer_enabled // false')
    BUFFER_SIZE=$(echo "$STATUS_RESPONSE" | jq -r '.buffer_size // 0')
    
    echo "  Version: $VERSION"
    echo "  Buffer Enabled: $BUFFER_ENABLED"
    echo "  Current Buffer Size: $BUFFER_SIZE"
    
    if [ "$VERSION" = "2.1.0" ]; then
        print_pass "Correct version (2.1.0)"
    else
        print_warn "Version mismatch. Expected 2.1.0, got $VERSION"
    fi
else
    print_fail "Status endpoint failed (HTTP $STATUS_CODE)"
fi

###############################################################################
# TEST 2: Increment View (Buffered)
###############################################################################
print_header "TEST 2: Increment View API"
print_test "Simulating view increment..."

INCREMENT_RESPONSE=$(curl -s -X POST "$API_BASE/increment-view" \
    -H "Content-Type: application/json" \
    -d '{"post_id": 1}')

INCREMENTED=$(echo "$INCREMENT_RESPONSE" | jq -r '.incremented // false')
BUFFERED=$(echo "$INCREMENT_RESPONSE" | jq -r '.buffered // false')
COUNT=$(echo "$INCREMENT_RESPONSE" | jq -r '.count // 0')

if [ "$INCREMENTED" = "true" ]; then
    print_pass "View incremented successfully"
    echo "  Count: $COUNT"
    echo "  Buffered: $BUFFERED"
    
    if [ "$BUFFERED" = "true" ]; then
        print_pass "Buffering is working"
    else
        print_warn "Buffering is disabled"
    fi
else
    print_fail "Failed to increment view"
    echo "  Response: $INCREMENT_RESPONSE"
fi

###############################################################################
# TEST 3: Anti-Spam (Same IP/UA)
###############################################################################
print_header "TEST 3: Anti-Spam Protection"
print_test "Testing duplicate view detection..."

# Segunda vista con misma IP debería ser rechazada
DUPLICATE_RESPONSE=$(curl -s -X POST "$API_BASE/increment-view" \
    -H "Content-Type: application/json" \
    -d '{"post_id": 1}')

DUPLICATE_INCREMENTED=$(echo "$DUPLICATE_RESPONSE" | jq -r '.incremented // true')
REASON=$(echo "$DUPLICATE_RESPONSE" | jq -r '.reason // ""')

if [ "$DUPLICATE_INCREMENTED" = "false" ] && [ "$REASON" = "already_viewed" ]; then
    print_pass "Anti-spam working (duplicate rejected)"
else
    print_warn "Anti-spam may not be working correctly"
    echo "  Expected: already_viewed, Got: $REASON"
fi

###############################################################################
# TEST 4: Slug-based Increment
###############################################################################
print_header "TEST 4: Slug-based Increment"
print_test "Testing increment by slug..."

SLUG_RESPONSE=$(curl -s -X POST "$API_BASE/increment-view" \
    -H "Content-Type: application/json" \
    -d '{"slug": "hello-world"}')

SLUG_INCREMENTED=$(echo "$SLUG_RESPONSE" | jq -r '.incremented // "error"')

if [ "$SLUG_INCREMENTED" != "error" ]; then
    print_pass "Slug-based increment working"
else
    print_warn "Slug-based increment failed (post 'hello-world' may not exist)"
fi

###############################################################################
# TEST 5: Bot Detection
###############################################################################
print_header "TEST 5: Bot Detection"
print_test "Testing bot user-agent rejection..."

BOT_RESPONSE=$(curl -s -X POST "$API_BASE/increment-view" \
    -H "Content-Type: application/json" \
    -H "User-Agent: Googlebot/2.1" \
    -d '{"post_id": 999}')

BOT_INCREMENTED=$(echo "$BOT_RESPONSE" | jq -r '.incremented // true')
BOT_REASON=$(echo "$BOT_RESPONSE" | jq -r '.reason // ""')

if [ "$BOT_INCREMENTED" = "false" ] && [ "$BOT_REASON" = "bot_detected" ]; then
    print_pass "Bot detection working"
else
    print_warn "Bot detection may not be working"
fi

###############################################################################
# TEST 6: CORS Headers
###############################################################################
print_header "TEST 6: CORS Configuration"
print_test "Testing CORS headers..."

CORS_RESPONSE=$(curl -s -I -X OPTIONS "$API_BASE/increment-view" \
    -H "Origin: https://elpilon.com.co")

if echo "$CORS_RESPONSE" | grep -q "Access-Control-Allow-Origin"; then
    print_pass "CORS headers present"
else
    print_warn "CORS headers not detected"
fi

###############################################################################
# TEST 7: GraphQL Integration (si está disponible)
###############################################################################
print_header "TEST 7: GraphQL Integration"
print_test "Testing GraphQL endpoint..."

GRAPHQL_RESPONSE=$(curl -s -X POST "$GRAPHQL_ENDPOINT" \
    -H "Content-Type: application/json" \
    -d '{"query": "{ trendingPosts(first: 1) { nodes { id title viewCount trendingScore } } }"}')

GRAPHQL_ERROR=$(echo "$GRAPHQL_RESPONSE" | jq -r '.errors // []' | jq 'length')

if [ "$GRAPHQL_ERROR" = "0" ]; then
    print_pass "GraphQL queries working"
    
    # Verificar campos personalizados
    VIEW_COUNT=$(echo "$GRAPHQL_RESPONSE" | jq -r '.data.trendingPosts.nodes[0].viewCount // null')
    TRENDING_SCORE=$(echo "$GRAPHQL_RESPONSE" | jq -r '.data.trendingPosts.nodes[0].trendingScore // null')
    
    if [ "$VIEW_COUNT" != "null" ]; then
        print_pass "viewCount field available in GraphQL"
    else
        print_warn "viewCount field not available"
    fi
    
    if [ "$TRENDING_SCORE" != "null" ]; then
        print_pass "trendingScore field available in GraphQL"
    else
        print_warn "trendingScore field not available (may need calculation)"
    fi
else
    print_warn "GraphQL queries have errors (WPGraphQL may not be installed)"
fi

###############################################################################
# TEST 8: Load Test (simulación ligera)
###############################################################################
print_header "TEST 8: Light Load Test"
print_test "Simulating 20 concurrent views..."

START_TIME=$(date +%s)

for i in {1..20}; do
    curl -s -X POST "$API_BASE/increment-view" \
        -H "Content-Type: application/json" \
        -d "{\"post_id\": $((RANDOM % 10 + 1))}" &
done

wait

END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

echo "  Duration: ${DURATION}s"

if [ $DURATION -lt 10 ]; then
    print_pass "Load test completed in reasonable time (<10s)"
else
    print_warn "Load test took longer than expected (${DURATION}s)"
fi

# Verificar buffer después del load test
sleep 2
NEW_STATUS=$(curl -s "$API_BASE/status")
NEW_BUFFER_SIZE=$(echo "$NEW_STATUS" | jq -r '.buffer_size // 0')
echo "  Buffer size after load: $NEW_BUFFER_SIZE"

if [ "$NEW_BUFFER_SIZE" -gt 0 ]; then
    print_pass "Buffer accumulating views correctly"
else
    print_warn "Buffer size is 0 (may have auto-flushed or buffering disabled)"
fi

###############################################################################
# TEST 9: Database Table Check (requiere acceso a DB)
###############################################################################
print_header "TEST 9: Database Validation"
print_test "Checking database table..."

# Este test requiere acceso a la base de datos
# Puedes ejecutarlo manualmente o usar WP-CLI

echo "  Manual check required:"
echo "  Run: wp db query 'SHOW TABLES LIKE \"wp_post_views\"'"
echo "  Expected: Table should exist"

###############################################################################
# TEST 10: Performance Check
###############################################################################
print_header "TEST 10: Performance Check"
print_test "Measuring API response times..."

TOTAL_TIME=0
ITERATIONS=5

for i in $(seq 1 $ITERATIONS); do
    START=$(date +%s%N)
    curl -s -X POST "$API_BASE/increment-view" \
        -H "Content-Type: application/json" \
        -d "{\"post_id\": $i}" > /dev/null
    END=$(date +%s%N)
    
    TIME=$((($END - $START) / 1000000))  # Convert to milliseconds
    TOTAL_TIME=$((TOTAL_TIME + TIME))
    echo "  Request $i: ${TIME}ms"
done

AVG_TIME=$((TOTAL_TIME / ITERATIONS))
echo "  Average response time: ${AVG_TIME}ms"

if [ $AVG_TIME -lt 100 ]; then
    print_pass "Excellent performance (<100ms average)"
elif [ $AVG_TIME -lt 300 ]; then
    print_pass "Good performance (<300ms average)"
else
    print_warn "Performance could be improved (${AVG_TIME}ms average)"
fi

###############################################################################
# SUMMARY
###############################################################################
print_header "VALIDATION SUMMARY"

echo -e "${GREEN}Passed:${NC} $PASS_COUNT"
echo -e "${YELLOW}Warnings:${NC} $WARN_COUNT"
echo -e "${RED}Failed:${NC} $FAIL_COUNT"

echo ""

if [ $FAIL_COUNT -eq 0 ] && [ $WARN_COUNT -eq 0 ]; then
    echo -e "${GREEN}✓ ALL TESTS PASSED!${NC}"
    echo "Plugin is ready for production deployment."
    exit 0
elif [ $FAIL_COUNT -eq 0 ]; then
    echo -e "${YELLOW}⚠ TESTS PASSED WITH WARNINGS${NC}"
    echo "Review warnings before deploying to production."
    exit 0
else
    echo -e "${RED}✗ SOME TESTS FAILED${NC}"
    echo "Fix issues before deploying to production."
    exit 1
fi